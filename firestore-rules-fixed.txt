rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function isAuthenticated() {
      return request.auth != null;
    }

    // Current user's apartment id (may be null)
    function currentUserApartmentId() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.current_apartment_id
        : null;
    }

    // Membership helpers (top-level collection: apartmentMembers, id format: {apartmentId}_{userId})
    function isApartmentMemberOfThisApartment(apartmentId, userId) {
      return exists(/databases/$(database)/documents/apartmentMembers/$(apartmentId + '_' + userId));
    }
    function getApartmentIdFromMemberDocId(memberDocId) {
      return memberDocId.split('_')[0];
    }
    function getUserIdFromMemberDocId(memberDocId) {
      return memberDocId.split('_')[1];
    }
    function isApartmentAdmin(apartmentId, userId) {
      return isApartmentMemberOfThisApartment(apartmentId, userId) &&
             get(/databases/$(database)/documents/apartmentMembers/$(apartmentId + '_' + userId)).data.role == 'admin';
    }

    // restrict UPDATEs to specific keys where relevant
    function changedOnly(allowed) {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(allowed);
    }

    // ---------- users ----------
    match /users/{userId} {
      // Read: self OR any user who is a member of my current apartment
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        (currentUserApartmentId() != null && isApartmentMemberOfThisApartment(currentUserApartmentId(), userId))
      );

      // Create: self only, without current_apartment_id
      allow create: if isAuthenticated() &&
        request.auth.uid == userId &&
        request.resource.data.email == request.auth.token.email &&
        !("current_apartment_id" in request.resource.data);

      // Update: self only, with strict field validation
      allow update: if isAuthenticated() && request.auth.uid == userId && (
        // Only full_name & phone
        (changedOnly(['full_name', 'phone'])) ||

        // Only current_apartment_id (must be null or valid membership)
        (
          changedOnly(['current_apartment_id']) &&
          (
            request.resource.data.current_apartment_id == null ||
            exists(/databases/$(database)/documents/apartmentMembers/$(request.resource.data.current_apartment_id + '_' + userId))
          )
        ) ||

        // All three together
        (
          request.resource.data.keys().hasAll(['full_name', 'phone', 'current_apartment_id']) &&
          (
            request.resource.data.current_apartment_id == null ||
            exists(/databases/$(database)/documents/apartmentMembers/$(request.resource.data.current_apartment_id + '_' + userId))
          )
        )
      );
    }

    // ---------- apartments ----------
    match /apartments/{apartmentId} {
      allow read: if isAuthenticated() && isApartmentMemberOfThisApartment(apartmentId, request.auth.uid);

      allow create: if isAuthenticated() &&
        request.resource.data.invite_code is string &&
        request.resource.data.invite_code.size() == 6;

      allow update: if isAuthenticated() && isApartmentAdmin(apartmentId, request.auth.uid) &&
        (request.resource.data.keys().hasOnly(['name', 'description']) ||
         request.resource.data.keys().hasAll(['name', 'description']));

      allow delete: if false;
    }

    // ---------- apartmentMembers ----------
    match /apartmentMembers/{apartmentMemberId} {
      // Read / List
      allow read: if isAuthenticated() && (
        request.auth.uid == getUserIdFromMemberDocId(apartmentMemberId) ||
        resource.data.apartment_id == currentUserApartmentId()
      );

      // Create: self-join only
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.user_id &&
        getUserIdFromMemberDocId(apartmentMemberId) == request.auth.uid &&
        getApartmentIdFromMemberDocId(apartmentMemberId) == request.resource.data.apartment_id &&
        request.resource.data.role == 'member';

      allow delete: if isAuthenticated() &&
        request.auth.uid == getUserIdFromMemberDocId(apartmentMemberId);

      allow update: if false;
    }

    // ---------- apartmentInvites ----------
    match /apartmentInvites/{inviteCode} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() &&
        request.resource.data.invite_code == inviteCode &&
        request.resource.data.invite_code is string &&
        request.resource.data.invite_code.size() == 6 &&
        request.resource.data.apartment_id is string &&
        request.resource.data.apartment_name is string;

      allow update, delete: if false;
    }

    // ---------- expenses ----------
    match /expenses/{expenseId} {
      // Read
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();

      // Create – payer creates
      allow create: if isAuthenticated() &&
        request.resource.data.paid_by_user_id == request.auth.uid &&
        request.resource.data.apartment_id == currentUserApartmentId();

      // Update – כל חבר בדירה יכול לערוך הכל, למעט paid_by_user_id/apartment_id
      allow update: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId() &&
        isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid) &&
        request.resource.data.paid_by_user_id == resource.data.paid_by_user_id &&
        request.resource.data.apartment_id == resource.data.apartment_id;

      // Delete – payer only
      allow delete: if isAuthenticated() &&
        resource.data.paid_by_user_id == request.auth.uid &&
        resource.data.apartment_id == currentUserApartmentId();
    }

    // ---------- debtSettlements ----------
    match /debtSettlements/{settlementId} {
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();

      allow create: if isAuthenticated() &&
        (request.resource.data.payer_user_id == request.auth.uid || request.resource.data.receiver_user_id == request.auth.uid) &&
        request.resource.data.apartment_id == currentUserApartmentId();

      allow update, delete: if false;
    }

    // ---------- cleaningTasks ----------
    match /cleaningTasks/{taskId} {
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();

      // Single shared doc per apartment (doc id == apartmentId)
      allow create: if isAuthenticated() &&
        isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid) &&
        taskId == request.resource.data.apartment_id &&
        request.resource.data.apartment_id == currentUserApartmentId();

      // Rotation/assignment only
      allow update: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId() &&
        (
          resource.data.user_id == request.auth.uid ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        ) &&
        changedOnly(['user_id', 'rotation', 'assigned_at', 'frequency_days', 'apartment_id']) &&
        request.resource.data.apartment_id == resource.data.apartment_id;

      allow delete: if false;
    }

    // ---------- checklistItems (collection GROUP!) ----------
    match /{path=**}/checklistItems/{itemId} {
      // Read: כל חבר בדירה הנוכחית
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();

      // Create
      allow create: if isAuthenticated() &&
        request.resource.data.apartment_id == currentUserApartmentId() &&
        isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid) &&
        request.resource.data.cleaning_task_id is string;

      // Update: רק מי שבתור; משנים רק שדות ההשלמה (+אפשרות ביטול)
      allow update: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId() &&
        get(/databases/$(database)/documents/cleaningTasks/$(resource.data.cleaning_task_id)).data.user_id == request.auth.uid &&
        changedOnly(['completed','completed_by','completed_at']) &&
        (
          (request.resource.data.completed == true &&
           request.resource.data.completed_by == request.auth.uid &&
           request.resource.data.completed_at is timestamp)
          ||
          (request.resource.data.completed == false &&
           (!('completed_by' in request.resource.data) || request.resource.data.completed_by == null) &&
           (!('completed_at' in request.resource.data) || request.resource.data.completed_at == null))
        );

      // מחיקה
      allow delete: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId() &&
        isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid);
    }

    // ---------- shoppingItems ----------
    match /shoppingItems/{itemId} {
      // Read
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();

      // Create
      allow create: if isAuthenticated() &&
        request.resource.data.added_by_user_id == request.auth.uid &&
        request.resource.data.apartment_id == currentUserApartmentId()
        && request.resource.data.name is string
        && (!('quantity' in request.resource.data) || request.resource.data.quantity is number)
        && (!('priority' in request.resource.data) ||
            request.resource.data.priority in ['low','normal','high'] ||
            request.resource.data.priority is int)
        && (!('purchased' in request.resource.data) || request.resource.data.purchased == false)
        && (!('purchased_by_user_id' in request.resource.data) || request.resource.data.purchased_by_user_id == null);

      // Update – 3 מצבים
      allow update: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId() && (
          (
            resource.data.purchased == false &&
            changedOnly(['name','quantity','unit','notes','price','priority','name_lower','last_updated','order_index'])
          )
          ||
          (
            changedOnly(['purchased','purchased_by_user_id','purchased_at','price']) &&
            request.resource.data.purchased == true &&
            request.resource.data.purchased_by_user_id == request.auth.uid &&
            request.resource.data.purchased_at is timestamp
          )
          ||
          (
            changedOnly(['purchased','purchased_by_user_id','purchased_at']) &&
            request.resource.data.purchased == false &&
            resource.data.purchased_by_user_id == request.auth.uid &&
            (!('purchased_by_user_id' in request.resource.data) || request.resource.data.purchased_by_user_id == null) &&
            (!('purchased_at' in request.resource.data) || request.resource.data.purchased_at == null)
          )
        );

      // Delete
      allow delete: if isAuthenticated() &&
        resource.data.added_by_user_id == request.auth.uid &&
        resource.data.purchased == false &&
        resource.data.apartment_id == currentUserApartmentId();
    }

    // ---------- debts ----------
    match /debts/{debtId} {
      // Read
      allow read: if isAuthenticated()
        && resource.data.apartment_id == currentUserApartmentId();

      // Create open debt
      allow create: if isAuthenticated()
        && request.resource.data.apartment_id == currentUserApartmentId()
        && isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid)
        && request.resource.data.from_user_id is string
        && request.resource.data.to_user_id is string
        && request.resource.data.amount is number
        && request.resource.data.status == 'open';

      // Close debt (open -> closed) only
      allow update: if isAuthenticated()
        && resource.data.apartment_id == currentUserApartmentId()
        && isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        && resource.data.status == 'open'
        && request.resource.data.status == 'closed'
        && request.resource.data.apartment_id == resource.data.apartment_id
        && !('amount' in request.resource.data)
        && !('from_user_id' in request.resource.data)
        && !('to_user_id' in request.resource.data)
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','closed_at','closed_by']);
      allow delete: if false;
    }

    // ---------- balances ----------
    match /balances/{apartmentId}/users/{userId} {
      // Read: כל חבר בדירה — או אם הדירה ב-user תואמת ל-apartmentId
      allow read: if isAuthenticated()
        && (
          isApartmentMemberOfThisApartment(apartmentId, request.auth.uid) ||
          currentUserApartmentId() == apartmentId
        );

      // Write: פשוט - כל משתמש מחובר יכול לכתוב (זמני לפתרון הבעיה)
      allow write: if isAuthenticated();
    }

    // ---------- monthlyExpenses ----------
    match /apartments/{apartmentId}/monthlyExpenses/{monthKey}/expenses/{expenseId} {
      // Read: כל חבר בדירה
      allow read: if isAuthenticated()
        && apartmentId == currentUserApartmentId()
        && isApartmentMemberOfThisApartment(apartmentId, request.auth.uid);

      // Create: כל חבר בדירה יכול ליצור expense חודשי
      allow create: if isAuthenticated()
        && apartmentId == currentUserApartmentId()
        && isApartmentMemberOfThisApartment(apartmentId, request.auth.uid)
        && request.resource.data.apartment_id == apartmentId
        && request.resource.data.amount is number
        && request.resource.data.created_by == request.auth.uid;

      // Update/Delete: לא מותר
      allow update, delete: if false;
    }

    // ---------- actions (audit log) ----------
    match /actions/{actionId} {
      // Read
      allow read: if isAuthenticated()
        && resource.data.apartment_id == currentUserApartmentId();

      // Create: פשוט - כל משתמש מחובר יכול ליצור action אם הדירה תואמת
      allow create: if isAuthenticated()
        && request.resource.data.apartment_id == currentUserApartmentId()
        && request.resource.data.type in ['debt_closed','debt_created','purchase','transfer']
        && request.resource.data.actor_uid == request.auth.uid
        && ('created_at' in request.resource.data);

      allow update, delete: if false;
    }

    // ---------- default deny ----------
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
