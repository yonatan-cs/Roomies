rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function isAuthenticated() {
      return request.auth != null;
    }

    // Current user's apartment id (may be null)
    // SAFER: check exists(...) first to avoid get() throwing when user doc doesn't exist yet
    function currentUserApartmentId() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.current_apartment_id :
        null;
    }

    // Membership helpers (top-level collection: apartmentMembers, id format: {apartmentId}_{userId})
    function isApartmentMemberOfThisApartment(apartmentId, userId) {
      return exists(/databases/$(database)/documents/apartmentMembers/$(apartmentId + '_' + userId));
    }
    function getApartmentIdFromMemberDocId(memberDocId) {
      return memberDocId.split('_')[0];
    }
    function getUserIdFromMemberDocId(memberDocId) {
      return memberDocId.split('_')[1];
    }
    function isApartmentAdmin(apartmentId, userId) {
      return isApartmentMemberOfThisApartment(apartmentId, userId) &&
             get(/databases/$(database)/documents/apartmentMembers/$(apartmentId + '_' + userId)).data.role == 'admin';
    }

    // restrict UPDATEs to specific keys where relevant
    function changedOnly(allowed) {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(allowed);
    }

    // ---------- Balance helpers (for member removal) ----------
    function balanceDocExists(apartmentId, userId) {
      return exists(/databases/$(database)/documents/balances/$(apartmentId)/users/$(userId));
    }
    function userNetBalance(apartmentId, userId) {
      return balanceDocExists(apartmentId, userId)
        ? get(/databases/$(database)/documents/balances/$(apartmentId)/users/$(userId)).data.net
        : 0;
    }
    function hasZeroNet(apartmentId, userId) {
      let net = userNetBalance(apartmentId, userId);
      return net >= -0.01 && net <= 0.01;
    }
    function noOpenDebts(apartmentId, userId) {
      return !balanceDocExists(apartmentId, userId) ||
             !('has_open_debts' in get(/databases/$(database)/documents/balances/$(apartmentId)/users/$(userId)).data) ||
             get(/databases/$(database)/documents/balances/$(apartmentId)/users/$(userId)).data.has_open_debts == false;
    }

    // ---------- users ----------
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        (currentUserApartmentId() != null && isApartmentMemberOfThisApartment(currentUserApartmentId(), userId))
      );

      allow create: if isAuthenticated() &&
        request.auth.uid == userId &&
        request.resource.data.email == request.auth.token.email &&
        !("current_apartment_id" in request.resource.data);

      allow update: if isAuthenticated() && (
        (
          request.auth.uid == userId && (
            (changedOnly(['full_name', 'phone'])) ||
            (
              changedOnly(['current_apartment_id']) &&
              (
                request.resource.data.current_apartment_id == null ||
                exists(/databases/$(database)/documents/apartmentMembers/$(request.resource.data.current_apartment_id + '_' + userId))
              )
            ) ||
            (
              request.resource.data.keys().hasAll(['full_name', 'phone', 'current_apartment_id']) &&
              (
                request.resource.data.current_apartment_id == null ||
                exists(/databases/$(database)/documents/apartmentMembers/$(request.resource.data.current_apartment_id + '_' + userId))
              )
            )
          )
        )
        ||
        (
          changedOnly(['current_apartment_id']) &&
          isApartmentMemberOfThisApartment(currentUserApartmentId(), request.auth.uid) &&
          resource.data.current_apartment_id == currentUserApartmentId() &&
          request.resource.data.current_apartment_id == null &&
          !exists(/databases/$(database)/documents/apartmentMembers/$(currentUserApartmentId() + '_' + userId))
        )
        // safe client-only fields (FCM/devices/profile)
        ||
        (
          request.auth.uid == userId &&
          changedOnly([
            'fcm_token',
            'device_type',
            'last_seen',
            'last_active',
            'device_info',
            'push_enabled',
            'display_name',
            'photo_url',
            'photoURL',
            'email',
            'locale'
          ])
        )
      );
    }

    // ---------- apartments ----------
    match /apartments/{apartmentId} {
      allow read: if isAuthenticated() && isApartmentMemberOfThisApartment(apartmentId, request.auth.uid);

      allow create: if isAuthenticated() &&
        request.resource.data.invite_code is string &&
        request.resource.data.invite_code.size() == 6;

      allow update: if isAuthenticated() && isApartmentAdmin(apartmentId, request.auth.uid) &&
        (request.resource.data.keys().hasOnly(['name', 'description']) ||
         request.resource.data.keys().hasAll(['name', 'description']));

      allow delete: if false;
    }

    // ---------- apartmentMembers ----------
    match /apartmentMembers/{apartmentMemberId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == getUserIdFromMemberDocId(apartmentMemberId) ||
        resource.data.apartment_id == currentUserApartmentId()
      );

      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.user_id &&
        getUserIdFromMemberDocId(apartmentMemberId) == request.auth.uid &&
        getApartmentIdFromMemberDocId(apartmentMemberId) == request.resource.data.apartment_id &&
        request.resource.data.role == 'member';

      allow delete: if isAuthenticated() &&
        isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid) &&
        resource.data.apartment_id == currentUserApartmentId() &&
        hasZeroNet(resource.data.apartment_id, resource.data.user_id) &&
        noOpenDebts(resource.data.apartment_id, resource.data.user_id);

      allow update: if false;
    }

    // ---------- apartmentInvites ----------
    match /apartmentInvites/{inviteCode} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() &&
        request.resource.data.invite_code == inviteCode &&
        request.resource.data.invite_code is string &&
        request.resource.data.invite_code.size() == 6 &&
        request.resource.data.apartment_id is string &&
        request.resource.data.apartment_name is string;

      allow update, delete: if false;
    }

    // ---------- expenses ----------
    match /expenses/{expenseId} {
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();

      allow create: if isAuthenticated() &&
        request.resource.data.paid_by_user_id == request.auth.uid &&
        request.resource.data.apartment_id == currentUserApartmentId() &&
        (!('visibleInUI' in request.resource.data) || request.resource.data.visibleInUI == true);

      allow update: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId() &&
        isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid) &&
        request.resource.data.paid_by_user_id == resource.data.paid_by_user_id &&
        request.resource.data.apartment_id == resource.data.apartment_id &&
        (!('visibleInUI' in request.resource.data) || request.resource.data.visibleInUI == resource.data.visibleInUI);

      allow delete: if isAuthenticated() &&
        resource.data.paid_by_user_id == request.auth.uid &&
        resource.data.apartment_id == currentUserApartmentId();
    }

    // ---------- debtSettlements ----------
    match /debtSettlements/{settlementId} {
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();

      allow create: if isAuthenticated() &&
        (request.resource.data.payer_user_id == request.auth.uid || request.resource.data.receiver_user_id == request.auth.uid) &&
        request.resource.data.apartment_id == currentUserApartmentId();

      allow update, delete: if false;
    }

    // ---------- cleaningTasks (legacy / top-level collection) ----------
    // Kept for backwards compatibility — do not remove unless migration completed.
    match /cleaningTasks/{taskId} {
      allow read: if isAuthenticated() &&
        (
          resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        );

      allow create: if isAuthenticated() &&
        isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid) &&
        taskId == request.resource.data.apartment_id;

      allow update: if isAuthenticated() &&
        (
          resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        ) &&
        (
          resource.data.user_id == request.auth.uid ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        ) &&
        changedOnly([
          'user_id',
          'rotation',
          'assigned_at',
          'frequency_days',
          'apartment_id',
          'last_completed_at',
          'last_completed_by'
        ]) &&
        request.resource.data.apartment_id == resource.data.apartment_id &&
        (
          !('last_completed_at' in request.resource.data) ||
          request.resource.data.last_completed_at is timestamp
        ) &&
        (
          !('last_completed_by' in request.resource.data) ||
          request.resource.data.last_completed_by == request.auth.uid
        );

      allow delete: if false;
    }

    // ---------- Cleaning tasks stored per-apartment (recommended new schema) ----------
    // /apartments/{apartmentId}/tasks/{taskId}
    match /apartments/{apartmentId}/tasks/{taskId} {
      // read: any apartment member (or when this apartment is the current one)
      allow read: if isAuthenticated() &&
        (
          apartmentId == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(apartmentId, request.auth.uid)
        );

      // create
      allow create: if isAuthenticated() &&
        isApartmentMemberOfThisApartment(apartmentId, request.auth.uid) &&
        request.resource.data.apartment_id == apartmentId &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.createdAt is timestamp;

      // update: protect immutable core fields
      allow update: if isAuthenticated() &&
        isApartmentMemberOfThisApartment(apartmentId, request.auth.uid) &&
        request.resource.data.apartment_id == resource.data.apartment_id &&
        request.resource.data.createdAt == resource.data.createdAt &&
        request.resource.data.createdBy == resource.data.createdBy;

      allow delete: if isAuthenticated() &&
        isApartmentMemberOfThisApartment(apartmentId, request.auth.uid);
    }

    // ---------- checklistItems under legacy cleaningTasks (UPDATED READ) ----------
    match /cleaningTasks/{taskId}/checklistItems/{itemId} {
      // ✅ read based on taskId (== apartmentId) without touching resource
      allow read: if isAuthenticated() &&
        (
          taskId == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(taskId, request.auth.uid)
        );

      // create — unchanged
      allow create: if isAuthenticated() &&
        (
          request.resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid)
        ) &&
        isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid);

      // update — unchanged
      allow update: if isAuthenticated() &&
        (
          resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        ) &&
        get(/databases/$(database)/documents/cleaningTasks/$(taskId)).data.user_id == request.auth.uid &&
        changedOnly(['completed','completed_by','completed_at']) &&
        (
          (request.resource.data.completed == true &&
           request.resource.data.completed_by == request.auth.uid &&
           request.resource.data.completed_at is timestamp)
          ||
          (request.resource.data.completed == false &&
           (!('completed_by' in request.resource.data) || request.resource.data.completed_by == null) &&
           (!('completed_at' in request.resource.data) || request.resource.data.completed_at == null))
        );

      // delete — unchanged
      allow delete: if isAuthenticated() &&
        (
          resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        ) &&
        isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid);
    }

    // ---------- checklistItems under new apartments tasks (per-apartment tasks) ----------
    match /apartments/{apartmentId}/tasks/{taskId}/checklistItems/{itemId} {
      allow read: if isAuthenticated() &&
        (
          resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        );

      allow create: if isAuthenticated() &&
        (
          request.resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid)
        ) &&
        isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid) &&
        // ensure the checklist item references the same apartment/task
        request.resource.data.apartment_id == apartmentId &&
        ( !('task_id' in request.resource.data) || request.resource.data.task_id == taskId );

      allow update: if isAuthenticated() &&
        (
          resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        ) &&
        // require the parent task's user_id to match when applicable (if your schema uses it)
        ( !exists(/databases/$(database)/documents/apartments/$(apartmentId)/tasks/$(taskId)) ||
          get(/databases/$(database)/documents/apartments/$(apartmentId)/tasks/$(taskId)).data.user_id == request.auth.uid
        ) &&
        changedOnly(['completed','completed_by','completed_at']) &&
        (
          (request.resource.data.completed == true &&
           request.resource.data.completed_by == request.auth.uid &&
           request.resource.data.completed_at is timestamp)
          ||
          (request.resource.data.completed == false &&
           (!('completed_by' in request.resource.data) || request.resource.data.completed_by == null) &&
           (!('completed_at' in request.resource.data) || request.resource.data.completed_at == null))
        );

      allow delete: if isAuthenticated() &&
        (
          resource.data.apartment_id == currentUserApartmentId() ||
          isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        ) &&
        isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid);
    }

    // ---------- checklistItems (collection GROUP) - READ ONLY ----------
    // Requires query filter: where('apartment_id','==', currentUserApartmentId())
    match /{path=**}/checklistItems/{itemId} {
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();
      allow create, update, delete: if false;
    }

    // ---------- shoppingItems ----------
    match /shoppingItems/{itemId} {
      allow read: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId();

      allow create: if isAuthenticated() &&
        request.resource.data.added_by_user_id == request.auth.uid &&
        request.resource.data.apartment_id == currentUserApartmentId()
        && request.resource.data.name is string
        && (!('quantity' in request.resource.data) || request.resource.data.quantity is number)
        && (!('priority' in request.resource.data) ||
            request.resource.data.priority in ['low','normal','high'] ||
            request.resource.data.priority is int)
        && (!('purchased' in request.resource.data) || request.resource.data.purchased == false)
        && (!('purchased_by_user_id' in request.resource.data) || request.resource.data.purchased_by_user_id == null);

      allow update: if isAuthenticated() &&
        resource.data.apartment_id == currentUserApartmentId() && (
          (
            resource.data.purchased == false &&
            changedOnly(['name','quantity','unit','notes','price','priority','name_lower','last_updated','order_index'])
          )
          ||
          (
            changedOnly(['purchased','purchased_by_user_id','purchased_at','price']) &&
            request.resource.data.purchased == true &&
            request.resource.data.purchased_by_user_id == request.auth.uid &&
            request.resource.data.purchased_at is timestamp
          )
          ||
          (
            changedOnly(['purchased','purchased_by_user_id','purchased_at']) &&
            request.resource.data.purchased == false &&
            resource.data.purchased_by_user_id == request.auth.uid &&
            (!('purchased_by_user_id' in request.resource.data) || request.resource.data.purchased_by_user_id == null) &&
            (!('purchased_at' in request.resource.data) || request.resource.data.purchased_at == null)
          )
        );

      allow delete: if isAuthenticated() &&
        resource.data.added_by_user_id == request.auth.uid &&
        resource.data.purchased == false &&
        resource.data.apartment_id == currentUserApartmentId();
    }

    // ---------- debts ----------
    match /debts/{debtId} {
      allow read: if isAuthenticated()
        && resource.data.apartment_id == currentUserApartmentId();

      allow create: if isAuthenticated()
        && request.resource.data.apartment_id == currentUserApartmentId()
        && isApartmentMemberOfThisApartment(request.resource.data.apartment_id, request.auth.uid)
        && (request.resource.data.from_user_id is string)
        && (request.resource.data.to_user_id is string)
        && (
             (request.resource.data.amount is number) ||
             (request.resource.data.amount_cents is int)
           )
        && request.resource.data.status == 'open';

      allow update: if isAuthenticated()
        && resource.data.apartment_id == currentUserApartmentId()
        && isApartmentMemberOfThisApartment(resource.data.apartment_id, request.auth.uid)
        && resource.data.status == 'open'
        && request.resource.data.status == 'closed'
        && request.resource.data.apartment_id == resource.data.apartment_id
        && request.resource.data.from_user_id == resource.data.from_user_id
        && request.resource.data.to_user_id == resource.data.to_user_id
        && (
            ( changedOnly(['status','closed_at','closed_by']) )
            ||
            (
              changedOnly(['status','closed_at','closed_by','amount','amount_cents']) &&
              (!('amount' in request.resource.data) || request.resource.data.amount == 0) &&
              (!('amount_cents' in request.resource.data) || request.resource.data.amount_cents == 0)
            )
           );

      allow delete: if false;
    }

    // ---------- balances ----------
    match /balances/{apartmentId}/users/{userId} {
      allow read: if isAuthenticated()
        && (
          isApartmentMemberOfThisApartment(apartmentId, request.auth.uid) ||
          currentUserApartmentId() == apartmentId
        );

      // זמני – עד שיעבור לשרת
      allow write: if isAuthenticated();
    }

    // ---------- apartments stats (cleaning counters) ----------
    // מבנה חדש: /apartments/{apartmentId}/stats/global
    match /apartments/{apartmentId}/stats/{statsId} {
      allow read: if isAuthenticated() &&
        isApartmentMemberOfThisApartment(apartmentId, request.auth.uid);

      // נאפשר ליצור/לאתחל רק את global
      allow create: if isAuthenticated() &&
        isApartmentMemberOfThisApartment(apartmentId, request.auth.uid) &&
        statsId == 'global';

      // עדכון אטומי: totalCleans וערך המשתמש ב-perUser עולים בדיוק ב+1
      allow update: if isAuthenticated()
        && isApartmentMemberOfThisApartment(apartmentId, request.auth.uid)
        && statsId == 'global'
        && request.resource.data.keys().hasOnly(['totalCleans','perUser','lastUpdated'])
        && (
             (('totalCleans' in resource.data) && request.resource.data.totalCleans == resource.data.totalCleans + 1)
             || (!('totalCleans' in resource.data) && request.resource.data.totalCleans == 1)
           )
        && (
             (('perUser' in resource.data) && ('perUser' in request.resource.data)
               && request.resource.data.perUser.keys().hasOnly(resource.data.perUser.keys().concat([request.auth.uid])))
             || (!('perUser' in resource.data)
               && ('perUser' in request.resource.data)
               && request.resource.data.perUser.keys().hasOnly([request.auth.uid]))
           )
        && (
             (('perUser' in resource.data) && (request.auth.uid in resource.data.perUser)
               && ('perUser' in request.resource.data) && (request.auth.uid in request.resource.data.perUser)
               && request.resource.data.perUser[request.auth.uid] == resource.data.perUser[request.auth.uid] + 1)
             || ((!('perUser' in resource.data) || !(request.auth.uid in resource.data.perUser))
               && ('perUser' in request.resource.data) && (request.auth.uid in request.resource.data.perUser)
               && request.resource.data.perUser[request.auth.uid] == 1)
           );

      allow delete: if false;
    }

    // ---------- apartments audit_logs (server-only create) ----------
    match /apartments/{apartmentId}/audit_logs/{logId} {
      allow read: if isAuthenticated() && isApartmentMemberOfThisApartment(apartmentId, request.auth.uid);
      allow create: if request.auth.token.admin == true;
      allow update, delete: if false;
    }

    // ---------- actions (audit log) ----------
    match /actions/{actionId} {
      allow read: if isAuthenticated()
        && resource.data.apartment_id == currentUserApartmentId();

      allow create: if isAuthenticated()
        && request.resource.data.apartment_id == currentUserApartmentId()
        && request.resource.data.type in [
             'debt_closed','debt_created','purchase','transfer',
             'member_removed','member_left','member_invited','member_joined'
           ]
        && request.resource.data.actor_uid == request.auth.uid
        && ('created_at' in request.resource.data);

      allow update, delete: if false;
    }

    // ---------- defaults (templates) ----------
    match /defaults/{defaultId} {
      allow read: if true;
      allow create, update, delete: if request.auth.token.admin == true;
    }

    // ---------- default deny ----------
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
